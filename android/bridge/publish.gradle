apply plugin: 'maven-publish'

task javadoc(type: Javadoc) {
    title = manifest.android_bridge.name
    source = android.sourceSets.main.java.srcDirs
    destinationDir = new File("$projectDir/javadoc")
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
     repositories  {
        // external publishing
        maven {
            name = "github" // @MANIFEST
            url = uri("https://maven.pkg.github.com/ipfs-shipyard/gomobile-ipfs") // @MANIFEST
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        // local publishing
        maven {
            name = "local"
            url = layout.buildDirectory.dir('../../../repo') // @MANIFEST
        }
    }

    publications {
        Production(MavenPublication) {
            artifacts = [
                "$buildDir/outputs/aar/bridge-release.aar",
                sourcesJar,
                javadocJar
            ]

            groupId manifest.global.group_id
			      artifactId manifest.android_bridge.artifact_id
			      version rootProject.ext.version

            pom {
                name = manifest.android_bridge.name
                url = manifest.global.github.url
                description = manifest.android_bridge.description
                packaging = manifest.global.android.packaging

                scm {
                    connection = manifest.global.android.scm.connection
                    developerConnection = manifest.global.android.scm.developer_connection
                    url = manifest.global.android.scm.url
                }
            }

            pom.withXml {
                def licensesNode = asNode().appendNode('licenses')
                manifest.global.licenses.each {
                    def licenseNode = licensesNode.appendNode('license')
                    licenseNode.appendNode('name', it.name)
                    licenseNode.appendNode('url', it.url)
                    licenseNode.appendNode('distribution', it.distribution)
                }

                def developersNode = asNode().appendNode('developers')
                manifest.global.developers.each {
                    def developerNode = developersNode.appendNode('developer')
                    developerNode.appendNode('id', it.id)
                    developerNode.appendNode('name', it.name)
                    developerNode.appendNode('email', it.email)
                    developerNode.appendNode('organization', it.organization)
                    developerNode.appendNode('organizationUrl', it.organization_url)
                }

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

tasks.register('publishToLocalRepository') {
    group = 'publishing'
    description = 'Publishes all Maven publications to GitHubPackages.'
    dependsOn 'build'
    dependsOn tasks.withType(PublishToMavenRepository).matching {
        it.repository == publishing.repositories.local
    }
}

tasks.register('publishToRemoteRepository') {
    group = 'publishing'
    description = 'Publishes all Maven publications to remote repository's
    dependsOn 'build'
    dependsOn tasks.withType(PublishToMavenRepository).matching {
        it.repository == publishing.repositories.github // @MANIFEST
    }
}

